/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ParDirCollapse.ih
 * @author Mohamad ONAYSSI (\c mohamad.onayssi@edu.esiee.fr )
 * ESIEE Paris
 *
 * @date 2015/12/22
 *
 * Implementation of inline methods defined in ParDirCollapse.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

template < typename  CC, typename TSpace>
inline
DGtal::ParDirCollapse<CC, TSpace>::ParDirCollapse( const KSpace & k) : K (k) {
    complex = 0;
}


template < typename  CC, typename TSpace>
inline
int
DGtal::ParDirCollapse<CC, TSpace>::getDirection(const Cell& F, const Cell& G)
{
    Vector V=K.uKCoords(F)-K.uKCoords(G);
    for (int i=0; i<K.dimension; i++)
        if (V[i]!=0)
             return i;
}
template < typename CC,  typename TSpace>
inline
int
DGtal::ParDirCollapse<CC, TSpace>::getOrientation(const Cell& F, const Cell& G)
{
    Vector V=K.uKCoords(F)-K.uKCoords(G);

    //loop over V coordinates
    for (int i=0; i<K.dimension; i++)
        if (V[i]!=0) return V[i];
}

template < typename CC,  typename TSpace>
inline
void
DGtal::ParDirCollapse<CC, TSpace>::assignValues(Iterator it, int d,int orientation, int dir , std::vector<Cell> &SUB , int priority)
{
    Cells faces = K.uUpperIncident ( *it );
    for ( int i = 0; i < faces.size(); i++ )
    {//test the cell if it's in the complex
        if ( complex->findCell ( d+1, faces[i] ) != complex->end(d+1) )
        {
            if (getOrientation(*it, faces[i])==orientation &&
                    getDirection(*it, faces[i])==dir &&
                    K.uDim(faces[i])==d+1)
            {//assigning value with cells

                // if faces[i].data != CC::FIXED && *it.data != CC:::FIXED
                {
                SUB.push_back( faces[i] );
                complex->insertCell( SUB.back(), priority );
                SUB.push_back( *it );
                complex->insertCell( SUB.back(), priority );
                }
            }
            break;
        }
    }
}



template < typename CC, typename TSpace>
inline
void
DGtal::ParDirCollapse<CC, TSpace>::exec(std::vector<Cell> &SUB, int iteration_number )
{
    using namespace functions;
    using  namespace ccops;
    typename CC::DefaultCellMapIteratorPriority P;
    for (int Coll_iteration=0;Coll_iteration<iteration_number;Coll_iteration++)
    {
        CC boundary = complex->boundary();
        int priority = 0;
        for (int dim=0;dim<K.dimension;dim++)//dim===direction
        {
            for (int orientation=-1;orientation<=1;orientation+=2)
            {
                for (int d = K.dimension - 1; d >= 0; d--)//d: dimension
                {
                    for ( Iterator begin = boundary.begin(); begin != boundary.end(); ++begin, ++priority )
                    {
                        if ( K.uDim (*begin ) == d )
                        {
                            assignValues(begin,  d,orientation, dim , SUB , priority);
                        }
                    }
                    collapse( *complex, SUB.begin(), SUB.end(), P, true, true, true );
                    SUB.clear();
                    priority=0;
                }
            }
        }
    }
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


