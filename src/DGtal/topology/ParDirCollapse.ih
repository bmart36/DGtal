/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ParDirCollapse.ih
 * @author Mohamad ONAYSSI (\c mohamad.onayssi@edu.esiee.fr )
 * ESIEE Paris
 *
 * @date 2015/12/22
 *
 * Implementation of inline methods defined in ParDirCollapse.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

template < typename  CC, typename TSpace>
inline
DGtal::ParDirCollapse<CC, TSpace>::ParDirCollapse( const KSpace & k) : K (k) {
    complex = 0;
}


template < typename  CC, typename TSpace>
inline
int
DGtal::ParDirCollapse<CC, TSpace>::getDirection(const Cell& F, const Cell& G)
{
    Vector V=K.uKCoords(F)-K.uKCoords(G);
    for (int i=0; i<K.dimension; i++)
        if (V[i]!=0)
             return i;
}
template < typename CC,  typename TSpace>
inline
int
DGtal::ParDirCollapse<CC, TSpace>::getOrientation(const Cell& F, const Cell& G)
{
    Vector V=K.uKCoords(F)-K.uKCoords(G);

    //loop over V coordinates
    for (int i=0; i<K.dimension; i++)
        if (V[i]!=0) return V[i];
}

template < typename CC, typename TSpace>
inline
bool
DGtal::ParDirCollapse<CC, TSpace>::exec(int iteration_number )
{
    using namespace functions;
    using  namespace ccops;
    std::vector<Cell> SUB;
    int collapseval;
    typename CC::DefaultCellMapIteratorPriority P;
    for (int Coll_iteration=0;Coll_iteration<iteration_number;Coll_iteration++)
    {
        CC boundary = complex->boundary();
        int priority = 0;
        for (int dim=0;dim<K.dimension;dim++)//dim===direction
        {
            for (int orientation=-1;orientation<=1;orientation+=2)
            {
                for (int d = K.dimension - 1; d >= 0; d--)//d: dimension
                {
                    for (  CellMapConstIterator begin = boundary.begin(d); begin != boundary.end(d); ++begin, ++priority )
                    {
                        if ( K.uDim (begin->first ) == d )
                        {
                            //assignValues(begin,  d,orientation, dim , SUB , priority);
                            Cells faces = K.uUpperIncident ( begin->first );
                            for ( int i = 0; i < faces.size(); i++ )
                            {//test the cell if it's in the complex
                                if ( complex->findCell ( d+1, faces[i] ) != complex->end(d+1) )
                                {
                                    if (getOrientation(begin->first, faces[i])==orientation &&
                                            getDirection(begin->first, faces[i])==dim &&
                                            K.uDim(faces[i])==d+1)
                                    {//assigning value with cells

                                        uint32_t data = (*begin).second.data;
                                        //std::cout << "Face initial: "  << faces[i] << "data initial :" << data << "\n" << std::endl;
                                        if (faces[i] != CC::FIXED && data != CC::FIXED)
                                        {
                                        //std::cout << "Face removed: "  << faces[i] << "data :" <<data << "\n" << std::endl;
                                        SUB.push_back( faces[i] );
                                        complex->insertCell( SUB.back(), priority );
                                        SUB.push_back( begin->first );
                                        complex->insertCell( SUB.back(), priority );
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    collapseval=collapse( *complex, SUB.begin(), SUB.end(), P, true, true, true );
                    SUB.clear();
                    priority=0;
                }
            }
        }
    }
    if(collapseval>0)
        return true;
       return false;
}

template < typename CC, typename TSpace>
inline
void
DGtal::ParDirCollapse<CC, TSpace>::collapseSurface(){
    while(exec(1))
    {
        CellMapConstIterator constIterator = complex->begin(K.dimension -1);
        CellMapConstIterator itEd = complex->end(K.dimension -1);
        Cells faces = K.uUpperIncident ( constIterator->first );
        for ( int i = 0; i < faces.size(); i++ )
        {

            if ( complex->findCell ( K.uDim(faces[i]), faces[i] ) != complex->end(K.uDim(faces[i])+1) )
            {


                    for(;constIterator != itEd; ++constIterator)
                    {
                        complex->insertCell( faces[i], CC::FIXED );
                        complex->insertCell( constIterator->first, CC::FIXED );

                    }
            }
        }
            //return;
    }
}


//                                                                           //
///////////////////////////////////////////////////////////////////////////////
